#include <iostream>
#include <vector>
#include <queue>
#include <stack>

using namespace std;

// Function to perform BFS
void BFS(int startNode, const vector<vector<int>> &adjList, vector<bool> &visited) {
    queue<int> q;
    q.push(startNode);
    visited[startNode] = true;

    cout << "BFS Traversal: ";
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";

        for (int neighbor : adjList[node]) {
            if (!visited[neighbor]) {
                q.push(neighbor);
                visited[neighbor] = true;
            }
        }
    }
    cout << endl;
}

// Function to perform DFS
void DFS(int node, const vector<vector<int>> &adjList, vector<bool> &visited) {
    stack<int> s;
    s.push(node);

    cout << "DFS Traversal: ";
    while (!s.empty()) {
        int current = s.top();
        s.pop();

        if (!visited[current]) {
            cout << current << " ";
            visited[current] = true;
        }

        for (auto it = adjList[current].rbegin(); it != adjList[current].rend(); ++it) {
            if (!visited[*it]) {
                s.push(*it);
            }
        }
    }
    cout << endl;
}

int main() {
    int numNodes, numEdges;
    cout << "Enter the number of nodes: ";
    cin >> numNodes;

    cout << "Enter the number of edges: ";
    cin >> numEdges;

    vector<vector<int>> adjList(numNodes + 1); // Using 1-based indexing

    cout << "Enter the edges (u v):\n";
    for (int i = 0; i < numEdges; ++i) {
        int u, v;
        cin >> u >> v;
        adjList[u].push_back(v);
        adjList[v].push_back(u); // For undirected graph
    }

    int startNode;
    cout << "Enter the starting node for traversal: ";
    cin >> startNode;

    // Perform BFS
    vector<bool> visitedBFS(numNodes + 1, false);
    BFS(startNode, adjList, visitedBFS);

    // Perform DFS
    vector<bool> visitedDFS(numNodes + 1, false);
    DFS(startNode, adjList, visitedDFS);

    return 0;
}
