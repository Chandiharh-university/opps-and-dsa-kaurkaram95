#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Merge Sort
void merge(vector<int> &arr, int left, int mid, int right) {
    vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;

    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
            temp[k++] = arr[j++];
    }

    while (i <= mid) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];

    for (i = left, k = 0; i <= right; i++, k++)
        arr[i] = temp[k];
}

void mergeSort(vector<int> &arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Quick Sort
int partition(vector<int> &arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int> &arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Heap Sort
void heapify(vector<int> &arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
        largest = left;
    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void heapSort(vector<int> &arr) {
    int n = arr.size();

    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i > 0; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

// Main function to test all sorts
int main() {
    vector<int> mergeArr = {12, 11, 13, 5, 6, 7};
    vector<int> quickArr = mergeArr;
    vector<int> heapArr = mergeArr;

    cout << "Original Array: ";
    for (int num : mergeArr) cout << num << " ";
    cout << endl;

    // Merge Sort
    mergeSort(mergeArr, 0, mergeArr.size() - 1);
    cout << "Sorted Array (Merge Sort): ";
    for (int num : mergeArr) cout << num << " ";
    cout << endl;

    // Quick Sort
    quickSort(quickArr, 0, quickArr.size() - 1);
    cout << "Sorted Array (Quick Sort): ";
    for (int num : quickArr) cout << num << " ";
    cout << endl;

    // Heap Sort
    heapSort(heapArr);
    cout << "Sorted Array (Heap Sort): ";
    for (int num : heapArr) cout << num << " ";
    cout << endl;

    return 0;
}
